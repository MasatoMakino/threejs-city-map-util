(()=>{"use strict";var __webpack_modules__={485:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// UNUSED EXPORTS: Demo\n\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(75);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(12);\n;// CONCATENATED MODULE: ./demoSrc/Common.ts\n\n\nvar Common = /** @class */ (function () {\n    function Common() {\n    }\n    Common.initScene = function () {\n        return new three_module/* Scene */.xsS();\n    };\n    Common.initLight = function (scene) {\n        var ambientLight = new three_module/* AmbientLight */.Mig(0xffffff, 0.8);\n        scene.add(ambientLight);\n        return ambientLight;\n    };\n    Common.initCamera = function (scene, W, H, near, far) {\n        if (near === void 0) { near = 0.01; }\n        if (far === void 0) { far = 400000000000; }\n        var camera = new three_module/* PerspectiveCamera */.cPb(45, W / H, near, far);\n        camera.position.set(0, 0, 500);\n        camera.updateMatrixWorld(false);\n        scene.add(camera);\n        return camera;\n    };\n    Common.initControl = function (camera, render) {\n        var domElement;\n        if (render) {\n            domElement = render.domElement;\n        }\n        var control = new OrbitControls/* OrbitControls */.z(camera, domElement);\n        control.update();\n        return control;\n    };\n    Common.initRenderer = function (W, H, option) {\n        option = Object.assign({\n            color: 0x888888,\n        }, option);\n        var renderer = new three_module/* WebGLRenderer */.CP7({});\n        document.body.appendChild(renderer.domElement);\n        renderer.setClearColor(new three_module/* Color */.Ilk(option.color));\n        renderer.setSize(W, H);\n        renderer.setPixelRatio(window.devicePixelRatio);\n        return renderer;\n    };\n    Common.initHelper = function (scene) {\n        var axesHelper = new three_module/* AxesHelper */.y8_(2000);\n        scene.add(axesHelper);\n        return axesHelper;\n    };\n    return Common;\n}());\n\n\n;// CONCATENATED MODULE: ./esm/LatitudeLongitude.js\n/**\n * 緯度経度を表すクラス\n *\n * 特に指定がない限り、世界測地系での緯度経度を表します。\n */\nclass LatitudeLongitude {\n  constructor(lat = 0, lng = 0) {\n    /**\n     * latitude 緯度\n     * format : ddd.ddd... (十進数)\n     */\n    this.lat = 0;\n    /**\n     * longitude 経度\n     * format : ddd.ddd... (十進数)\n     */\n    this.lng = 0;\n    this.lat = lat;\n    this.lng = lng;\n  }\n  clone() {\n    return new LatitudeLongitude(this.lat, this.lng);\n  }\n}\n;// CONCATENATED MODULE: ./esm/JapanStandardRegionalMeshUtil.js\nvar _a;\n\n/**\n * 総務省統計局制定の基準地域メッシュコードを、緯度経度と相互変換するためのクラスです。\n * @see https://www.stat.go.jp/data/mesh/m_tuite.html\n * 基準地域メッシュコードは、世界測地系での緯度経度を基準に算出されます。\n * @see https://www.stat.go.jp/data/mesh/pdf/gaiyo1.pdf\n * 基準地域メッシュコードの概要図はこちらを参照ください。\n * @see https://www.stat.go.jp/data/mesh/pdf/m-kukaku.pdf\n *\n * PLATEAUプラットフォームはファイル命名形式に基準地域メッシュコードを利用しています。\n * @see https://www.mlit.go.jp/plateau/learning/tpc03-1/#p3_1\n * インタラクティブマップで目的地のメッシュコードが確認できます。\n * @see https://jstatmap.e-stat.go.jp/jstatmap/main/trialstart.html\n */\nclass JapanStandardRegionalMeshUtil {\n  /**\n   * 指定されたメッシュコードの、南西端（平面状では左下端）の緯度経度を返します。\n   * @param mesh\n   */\n  static toLatitudeLongitude(mesh) {\n    if (mesh == null || !this.validateMeshCode(mesh)) {\n      return undefined;\n    }\n    const latLng = new LatitudeLongitude();\n    this.addLatLng(latLng, mesh, 0, 4, 1, 100);\n    this.addLatLng(latLng, mesh, 4, 6, 1 / 8);\n    this.addLatLng(latLng, mesh, 6, 8, 1 / 8 / 10);\n    this.addQuadrantMeshLatLng(latLng, 1 / 2, mesh.slice(8, 9));\n    this.addQuadrantMeshLatLng(latLng, 1 / 2 / 2, mesh.slice(9, 10));\n    return latLng;\n  }\n  static validateMeshCode(mesh) {\n    if (mesh == null) {\n      return false;\n    }\n    if (Number.isNaN(Number(mesh))) {\n      console.warn("メッシュコードが10進数以外で指定されています。変換ができないため、undefinedを返します。");\n      return false;\n    }\n    switch (mesh.length) {\n      case 4:\n      case 6:\n      case 8:\n      case 9:\n      case 10:\n        break;\n      default:\n        console.warn(`メッシュコードの桁数${mesh.length}は不正です。変換ができないため、undefinedを返します。`);\n        return false;\n    }\n    return true;\n  }\n  static addLatLng(latLng, code, startIndex, endIndex, latLngScale, shiftLng = 0) {\n    const centerIndex = startIndex + (endIndex - startIndex) / 2;\n    const latCode = code.slice(startIndex, centerIndex);\n    const lngCode = code.slice(centerIndex, endIndex);\n    if (latCode === "" || lngCode === "") return;\n    latLng.lat += Number(latCode) * this.primaryLatUnit * latLngScale;\n    latLng.lng += Number(lngCode) * latLngScale + shiftLng;\n  }\n  static addQuadrantMeshLatLng(latLng, latLngScale, code) {\n    if (code === "") return;\n    const meshNumber = Number(code);\n    if (meshNumber > 4) return;\n    latLng.lat += meshNumber > 2 ? this.MeshCodeLatitudeUnit * latLngScale : 0;\n    latLng.lng += meshNumber % 2 === 0 ? this.MeshCodeLongitudeUnit * latLngScale : 0;\n  }\n  static fromLongitudeLatitude(latitudeLongitude) {\n    const latLng = latitudeLongitude.clone();\n    let code = this.subLatLng(latLng, this.primaryLatUnit, 1, 100);\n    code += this.subLatLng(latLng, this.primaryLatUnit / 8, 1 / 8);\n    code += this.subLatLng(latLng, this.primaryLatUnit / 8 / 10, 1 / 8 / 10);\n    code += this.subQuadKmMeshLatLng(latLng, this.primaryLatUnit / 8 / 10 / 2, 1 / 8 / 10 / 2);\n    code += this.subQuadKmMeshLatLng(latLng, this.primaryLatUnit / 8 / 10 / 2 / 2, 1 / 8 / 10 / 2 / 2);\n    return code;\n  }\n  static subLatLng(latLng, unitLat, unitLng, shiftLng = 0) {\n    const latCode = Math.floor(latLng.lat / unitLat);\n    const lngCode = Math.floor(latLng.lng / unitLng - shiftLng);\n    latLng.lat -= latCode * unitLat;\n    latLng.lng -= lngCode * unitLng + shiftLng;\n    return `${latCode}${lngCode}`;\n  }\n  static subQuadKmMeshLatLng(latLng, unitLat, unitLng) {\n    const flagLat = latLng.lat > unitLat;\n    const flagLng = latLng.lng > unitLng;\n    latLng.lat -= flagLat ? unitLat : 0;\n    latLng.lng -= flagLng ? unitLng : 0;\n    return `${Number(flagLat) * 2 + Number(flagLng) + 1}`;\n  }\n}\n_a = JapanStandardRegionalMeshUtil;\n/**\n * 一次メッシュにおける、緯度の単位。\n * 一次メッシュが1変わると、緯度は2/3度変わる\n * @private\n */\nJapanStandardRegionalMeshUtil.primaryLatUnit = 1 / 60 * 40;\nJapanStandardRegionalMeshUtil.MeshCodeLatitudeUnit = _a.primaryLatUnit / 8 / 10;\nJapanStandardRegionalMeshUtil.MeshCodeLongitudeUnit = 1 / 8 / 10;\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/loaders/OBJLoader.js\nvar OBJLoader = __webpack_require__(815);\n;// CONCATENATED MODULE: ./esm/PlateauModelLoader.js\nvar PlateauModelLoader_a;\n\n\nclass PlateauModelLoader {\n  /**\n   * PLATEAUモデルをロードし、コンテナ内に配置できるよう回転する。\n   */\n  static async loadObjModel(url, origin) {\n    const txt = await fetch(url);\n    const str = await txt.text();\n    const meshCode = PlateauModelUtil.getMeshCode(url);\n    const meshCodeLatLng = JapanStandardRegionalMeshUtil.toLatitudeLongitude(meshCode);\n    const zone = PlateauModelUtil.getZone(str);\n    const shift = PlateauModelUtil.getShiftMeters(meshCodeLatLng, zone);\n    if (meshCodeLatLng == null || shift == null) {\n      return undefined;\n    }\n    const group = new OBJLoader/* OBJLoader */.L().parse(str);\n    const mesh = group.children[0];\n    if (mesh == null) return undefined;\n    mesh.userData.meshCode = meshCode;\n    mesh.userData.meshCodeLatLng = meshCodeLatLng;\n    mesh.userData.zone = zone;\n    mesh.userData.origin = origin;\n    //shift geometry\n    mesh.geometry.translate(-shift.x, shift.z, 0);\n    mesh.geometry.rotateX(-Math.PI / 2);\n    //shift mesh position\n    const meshPos = PositionUtil.toTransverseMercatorXZ(meshCodeLatLng, origin);\n    mesh.position.add(meshPos);\n    return mesh;\n  }\n}\nclass PlateauModelUtil {\n  /**\n   * PLATEAUモデル名から基準地域メッシュコードを取り出す。\n   * @param modelName\n   */\n  static getMeshCode(modelName) {\n    const regex = /(\\d+)_[\\w]+_\\d+\\.[a-z]+$/;\n    const match = modelName.match(regex);\n    if (match == null) {\n      return undefined;\n    }\n    return match[1];\n  }\n  static getOrigin(str, pattern) {\n    const match = str.match(pattern);\n    if (match) {\n      return Number(match[1]);\n    }\n    return undefined;\n  }\n}\nPlateauModelLoader_a = PlateauModelUtil;\nPlateauModelUtil.getZone = objString => {\n  const lat = PlateauModelLoader_a.getOrigin(objString, /PARAMETER\\["latitude_of_origin",([\\d\\.]+)\\]/);\n  const lng = PlateauModelLoader_a.getOrigin(objString, /PARAMETER\\["central_meridian",([\\d\\.]+)\\]/);\n  if (lat && lng) {\n    return new LatitudeLongitude(lat, lng);\n  }\n  return undefined;\n};\nPlateauModelUtil.getShiftMeters = (meshCodeLatLng, zone) => {\n  if (meshCodeLatLng == null || zone == null) return undefined;\n  return PositionUtil.toTransverseMercatorXZ(meshCodeLatLng, zone);\n};\n;// CONCATENATED MODULE: ./esm/latlonxy.js\n/**\n * latlonxy.js\n * 日本における世界測地系(=日本測地系2011)での、緯度経度と平面直角座標(XY)の双方向変換を行うJavaScript。\n * 以下の計算式に基づいて作成している。\n * Gauss-Krüger 投影における経緯度座標及び平面直角座標相互間の座標換算に\n * ついてのより簡明な計算方法: 2011 河瀬和重 (国土地理院時報，121，109–124．)\n * https://www.gsi.go.jp/common/000061216.pdf\n * 本プログラムは無保証であり、自己責任で使用すること。\n * author: Yuhichi Ishikawa (TonbiWing)\n */\n/**\n * @see https://zenn.dev/tonbiwing/articles/0a8c2a130058e0\n */\n/**\n * 緯度経度から平面直角座標XYに変換し、真北方向角、縮尺係数と共に、4要素の配列を返す。\n * zone関数またはzoneJapan関数で作成した座標系情報(zone)を指定する必要がある。\n * 結果のx,yは地理学、測量、航海術の標準にしたがってxが南北(x>0が北、x<0が南)、yが東西(y>0が東,y<0が西)。\n * @param {number} latDegree 変換対象の緯度(度) (ϕ=latitude)\n * @param {number} lonDegree 変換対象の経度(度) (λ=longitude)\n * @param {number} zone 座標系情報 [緯度, 経度, 定数S, 定数A]の配列。\n * @return {number[]} [X座標(m単位), Y座標(m単位), 真北方向角、縮尺係数]の4要素の変数\n */\nfunction latlon2xy(latDegree, lonDegree, zone) {\n  const originLat = zone[0]; //原点緯度(度)\n  const originLon = zone[1]; //原点経度(度)\n  const sOverline = zone[2]; //定数S\n  const aOverline = zone[3]; //定数A\n  function toRadian(degree) {\n    return degree * Math.PI / 180;\n  }\n  function toDegree(radian) {\n    return radian * 180.0 / Math.PI;\n  }\n  const coefN = 0.0016792203946287445; // N : 1/ (2F-1)\n  const coef0 = 0.08181919104281579; // = 2√n/(1+n)\n  const longerRadius = 6378137.0; //\n  /** α(i) (i=1...,5) : 経度緯度から平面直角座標の変換(latlon2xy)に使う定数 */\n  const alpha = [0.0, 8.377318247285465E-4, 7.608527848379248E-7, 1.1976455002315586E-9, 2.4291502606542468E-12, 5.750164384091974E-15];\n  const lat = toRadian(latDegree);\n  const lon = toRadian(lonDegree);\n  const diffLon = lon - toRadian(originLon); //λ-λ0 　経度と原点の経度の差分\n  const cosDiffLon = Math.cos(diffLon); //λc　= cos( λ - λ0) )\n  const sinDiffLon = Math.sin(diffLon); //λs  = sin( λ - λ0) )\n  //t = sinh( atanh(sin((ϕ)　- 2√n/(1+n) * atanh(2√n/(1+n)*sin(ϕ))  )　\n  const t = Math.sinh(Math.atanh(Math.sin(lat)) - coef0 * Math.atanh(coef0 * Math.sin(lat)));\n  const t_overline = Math.sqrt(1.0 + t * t); //t上線付\n  const xiDash = Math.atan(t / cosDiffLon); // ξ\'\n  const etaDash = Math.atanh(sinDiffLon / t_overline); // η\'\n  //平面直角座標XとYを計算するための行列式determinant\n  let determX = 0;\n  let determY = 0;\n  // tOverline, sigma, tauは子午線収差角γ (= -真北方向角) と 縮尺係数mのための変数\n  const tOverline = Math.sqrt(1 + t * t); //t上線付 = √(1+t＾2)\n  let sigma = 0; //σ (sigma) = 1 + Σ{j=1..5} 2jα(j) * cos(2jξ\') * cosh(2j η\')\n  let tau = 0; //τ (tau) =  Σ{j=1..5} 2jα(j) * cos(2jξ\') * cosh(2j η\')\n  for (let j = 1; j <= 5; j++) {\n    let j2xiDash = 2 * j * xiDash; //2j ξ\'\n    let j2etaDash = 2 * j * etaDash; //// 2j η\'\n    determX += alpha[j] * Math.sin(j2xiDash) * Math.cosh(j2etaDash);\n    determY += alpha[j] * Math.cos(j2xiDash) * Math.sinh(j2etaDash);\n    let j2Alpha = 2 * j * alpha[j]; // 2jα(j)\n    //σ (sigma) = 1 + Σ{j=1..5}( 2jα(j) * cos(2jξ\') * cosh(2j η\')\n    sigma += j2Alpha * Math.cos(j2xiDash) * Math.cosh(j2etaDash);\n    //τ (tau) =  Σ{j=1..5}( 2jα(j) * cos(2jξ\') * cosh(2j η\')\n    tau += j2Alpha * Math.sin(j2xiDash) * Math.sinh(j2etaDash);\n  }\n  sigma = sigma + 1;\n  let result = [0, 0, 0, 0]; // [x,y,真北方向角,縮尺係数]\n  result[0] = aOverline * (xiDash + determX) - sOverline; //x\n  result[1] = aOverline * (etaDash + determY); //y\n  //γ (gamma 子午線収差角= -真北方向角)\n  const gamma = Math.tanh((tau * tOverline * cosDiffLon + sigma * t * sinDiffLon) / (sigma * tOverline * cosDiffLon - tau * t * sinDiffLon));\n  const coefM = (1 - coefN) / (1 + coefN) * Math.tan(lat); //m (scaleFactor)\n  // m  (scaleFactor) = sOverline / a * √(σ^2 + τ^2)(t^2 + λx^2) {1+(1-n)/(1+n)*tanϕ)}^2\n  const scaleFactor = aOverline / longerRadius * Math.sqrt((sigma * sigma + tau * tau) / (t * t + cosDiffLon * cosDiffLon) * (1 + coefM * coefM));\n  result[2] = toDegree(-gamma); //-γ (-gamma = 真北方向角)\n  result[3] = scaleFactor; // m 縮尺係数\n  return result;\n}\n/**\n * 平面直角座標XYから緯度経度へ、系番号を指定して変換する。\n * 地理学、測量、航海術の標準にしたがってxが南北(x>0が北、x<0が南)、yが東西(y>0が東,y<0が西)。\n * zone関数またはzoneJapan関数で作成した座標系情報(zone)を指定する必要がある。\n * @param {number} x 変換対象のX座標 (原点からの南北の距離 (m単位))\n * @param {number} y 変換対象のY座標 (原点からの東西の距離 (m単位))\n * @param {number} zone 座標系情報 [緯度, 経度, 定数S, 定数A]の配列。\n * @return {number[]} 経度緯度(度単位)を示す1次元配列[緯度,経度]。\n */\nfunction xy2latlon(x, y, zone) {\n  const originLat = zone[0]; //原点緯度(度)\n  const originLon = zone[1]; //原点経度(度)\n  const sOverline = zone[2]; //定数S\n  const aOverline = zone[3]; //定数A\n  function toRadian(degree) {\n    return degree * Math.PI / 180;\n  }\n  function toDegree(radian) {\n    return radian * 180.0 / Math.PI;\n  }\n  /** β(i)　(i=1,2,...5) */\n  const beta = [0.0, 8.377321681620316E-4, 5.905870211016955E-8, 1.6734826761541112E-10, 2.1648237311010893E-13, 3.79409187887551E-16];\n  /** δ(i) (i=1,2,...6) */\n  const delta = [0.0, 0.003356551485604312, 6.571873263127177E-6, 1.7646404372866207E-8, 5.3877538900094696E-11, 1.7640075159133883E-13, 6.056074055207582E-16];\n  const xi = (x + sOverline) / aOverline; // ξ\n  const eta = y / aOverline; // η\n  // ξ\'(xiDash)と η\'(etaDash)を計算するための行列式determinant\n  let determXi = 0;\n  let determEta = 0;\n  for (let j = 1; j <= 5; j++) {\n    //Σ{j=1..5}( βj * sin(2jξ)cosh(2jη) )\n    determXi += beta[j] * Math.sin(2.0 * j * xi) * Math.cosh(2 * j * eta);\n    //Σ(j=1..5){ βjcos(2jξ)sinh(2jη) }\n    determEta += beta[j] * Math.cos(2.0 * j * xi) * Math.sinh(2 * j * eta);\n  }\n  const xiDash = xi - determXi; // ξ\'\n  const etaDash = eta - determEta; // η\'\n  const chi = Math.asin(Math.sin(xiDash) / Math.cosh(etaDash)); // χ= asin( sin ξ\' / cosh η\')\n  let sigmaLat = 0;\n  for (let j = 1; j <= 6; j++) {\n    sigmaLat += delta[j] * Math.sin(2.0 * j * chi); //Σ{j=1..5}( δjsin(2jχ) )\n  }\n\n  let latlon = [0, 0];\n  ///緯度(radian単位)  ϕ = χ+ sigmaLat\n  let latInRadian = chi + sigmaLat;\n  latlon[0] = toDegree(latInRadian);\n  //経度(radian単位) λ = λ0+tan−1(sinh(η′)/cos(ξ′))\n  let lonInRadian = toRadian(originLon) + Math.atan(Math.sinh(etaDash) / Math.cos(xiDash));\n  latlon[1] = toDegree(lonInRadian);\n  return latlon;\n}\n/**\n * 任意の原点の経度緯度を指定して、平面直角座標系情報の配列(原点緯度、原点経度、定数S、 定数A)返す\n * @param {number} orgLat 原点の緯度\n * @param {number} orgLon 原点の経度\n * @return {number[]} 座標系情報 [緯度, 経度, 定数S, 定数A]の4要素の配列\n */\nfunction xyzone(orgLat, orgLon) {\n  function toRadian(degree) {\n    return degree * Math.PI / 180;\n  }\n  const orgLatRadian = toRadian(orgLat); // 経度をRadianに変換する\n  const scaleFm0 = 0.9999; // mo : 原点における縮尺係数\n  const longerRadius = 6378137.0; //a: GRS80楕円体の長半径。\n  const coefN = 0.0016792203946287445; // N : 1/ (2-楕円扁平率の逆数)\n  const coef0 = 0.08181919104281579; //coef0 = 2√n/(1+n)\n  /** A(i) (i=0,1...,5) : 経度緯度から平面直角座標と、その逆変換の両方に使う定数 */\n  const largeA = [1.0000007049454078, -0.0025188297041239312, 2.6435429493240994E-6, -3.4526259073074147E-9, 4.891830424387949E-12, -7.228726045813916E-15];\n  //定数sOverLIneのための行列式 Σ(j=1..5)(Aj*sin(2*j*ϕ0)\n  let determS = 0;\n  for (let j = 1; j <= 5; j++) {\n    determS += largeA[j] * Math.sin(2.0 * j * orgLatRadian);\n  }\n  // (m0*a)/(1+n)\n  const originCoef = scaleFm0 * longerRadius / (1.0 + coefN);\n  // Sの上線付(ϕ0) = (m0*a)/(1+n) * ( A0 * ϕ0 + Σ(j=1..5)(Aj*sin(2*j*ϕ0) )\n  const sOverline = originCoef * (largeA[0] * orgLatRadian + determS);\n  // Aの上線付  = (m0*a)/(1+n) * A0\n  const aOverline = originCoef * largeA[0];\n  const result = [orgLat, orgLon, sOverline, aOverline];\n  return result;\n}\n/**\n * 日本の平面直角座標系1～19の系番号を指定して座標系情報の配列 [緯度, 経度, 定数S, 定数A] を取得する。\n * 日本の系1～19の原点に対応した内部定数値を、事前計算済みの定数S,定数Aを取得することで、\n * 逆三角関数、双曲線関数などの計算を省略し、実行を軽量化する。\n * @param {number} sysno 系番号(1～19)\n * @return {number[]} [緯度, 経度, 定数S, 定数A]の4要素の配列\n */\nfunction xyzonejapan(sysno) {\n  const origins = [[0.0, 0.0], [33.0, 129.5], [33.0, 131.0], [36.0, 132.16666666666667], [33.0, 133.5], [36.0, 134.33333333333333], [36.0, 136.0], [36.0, 137.16666666666667], [36.0, 138.5], [36.0, 139.83333333333333], [40.0, 140.83333333333333], [44.0, 140.25],\n  //          北海道渡島総合振興局の所管区域　北海道檜山振興局の所管区域\n  [44.0, 142.25], [44.0, 144.25],\n  //           置戸町、佐呂間町、大空町　北海道十勝総合振興局の所管区域　北海道釧路総合振興局の所管区域　北海道根室振興局の所管区域\n  [26.0, 142.0], [26.0, 127.5], [26.0, 124.0], [26.0, 131.0], [26.0, 136.0], [26.0, 154.0] // 座標系19: 太平洋側最東端 南鳥島付近(東京都のうち北緯28度から南であり、かつ東経143度から東である区域)\n  ];\n  /**  参照論文の変数「Sの上付線」の平面直角座標系1～19毎の原点に対応した定数。latlon2xyとxy2latlonで共通 */\n  const sOverline = [0, 3652382.768270788, 3652382.768270788, 3985144.116029223, 3652382.768270788, 3985144.116029223, 3985144.116029223, 3985144.116029223, 3985144.116029223, 3985144.116029223, 4429086.077333566, 4873334.987359202, 4873334.987359202, 4873334.987359202, 2876546.889061122, 2876546.889061122, 2876546.889061122, 2876546.889061122, 2212145.0174775715, 2876546.889061122];\n  /** 参照論文の変数「Aの上付線」の平面直角座標系1～19毎の原点に対応した定数。latlon2xyとxy2latlonで共通 */\n  const aOverline = [0, 6366812.400856472, 6366812.400856472, 6366812.400856472, 6366812.400856472, 6366812.400856472, 6366812.400856472, 6366812.400856472, 6366812.400856472, 6366812.400856472, 6366812.400856472, 6366812.400856472, 6366812.400856472, 6366812.400856472, 6366812.400856472, 6366812.400856472, 6366812.400856472, 6366812.400856472, 6366812.400856472, 6366812.400856472];\n  const result = [origins[sysno][0], origins[sysno][1], sOverline[sysno], aOverline[sysno]];\n  return result;\n}\n;// CONCATENATED MODULE: ./esm/PositionUtil.js\n\n\n/**\n * 各種座標とXYZ座標を変換するユーティリティクラス\n */\nclass PositionUtil {\n  static toTransverseMercatorXZ(latLng, origin) {\n    const zone = xyzone(origin.lat, origin.lng);\n    const xy = latlon2xy(latLng.lat, latLng.lng, zone);\n    return new three_module/* Vector3 */.Pa4(xy[1], 0, -xy[0]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/demo.ts\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError("Generator is already executing.");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\n\n\nvar Demo = /** @class */ (function () {\n    function Demo() {\n        var W = 1280;\n        var H = 640;\n        this.scene = Common.initScene();\n        Common.initLight(this.scene);\n        this.camera = Common.initCamera(this.scene, W, H);\n        this.renderer = Common.initRenderer(W, H, { antialias: false });\n        Common.initControl(this.camera, this.renderer);\n        Common.initHelper(this.scene);\n        this.load();\n        this.render();\n    }\n    Demo.prototype.load = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var origin, model, dem, loader, texture, dummy, targetLatLng, targetPos, dummyTop;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        origin = new LatitudeLongitude(35.65833333333333 + 2 / 3 / 8 / 10 / 2, 139.7375 + 1 / 160);\n                        return [4 /*yield*/, PlateauModelLoader.loadObjModel("./53393599_bldg_6677.obj", origin)];\n                    case 1:\n                        model = _a.sent();\n                        return [4 /*yield*/, PlateauModelLoader.loadObjModel("./53393599_dem_6677.obj", origin)];\n                    case 2:\n                        dem = _a.sent();\n                        if (dem) {\n                            loader = new three_module/* TextureLoader */.dpR();\n                            texture = loader.load("./53393599_18.jpg");\n                            dem.material = new three_module/* MeshStandardMaterial */.Wid({ map: texture });\n                            this.scene.add(dem);\n                        }\n                        if (model) {\n                            model.material = new three_module/* MeshBasicMaterial */.vBJ({ color: 0xffffff, transparent: true, opacity: 0.5 });\n                            this.scene.add(model);\n                            dummy = new three_module/* Mesh */.Kj0(new three_module/* SphereGeometry */.xo$(10, 10), new three_module/* MeshBasicMaterial */.vBJ());\n                            targetLatLng = new LatitudeLongitude(35.65864183184921, 139.74544075634395);\n                            targetPos = PositionUtil.toTransverseMercatorXZ(targetLatLng, model.userData.origin);\n                            dummy.position.copy(targetPos);\n                            this.scene.add(dummy);\n                            dummyTop = dummy.clone();\n                            dummyTop.position.y = 333;\n                            this.scene.add(dummyTop);\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Demo.prototype.render = function () {\n        var _this = this;\n        requestAnimationFrame(function () {\n            _this.render();\n        });\n        this.renderer.render(this.scene, this.camera);\n    };\n    return Demo;\n}());\n\nwindow.onload = function () {\n    new Demo();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///485\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var s=1/0;for(e=0;e<deferred.length;e++){for(var[U,F,B]=deferred[e],n=!0,g=0;g<U.length;g++)(!1&B||s>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[g])))?U.splice(g--,1):(n=!1,B<s&&(s=B));if(n){deferred.splice(e--,1);var I=F();void 0!==I&&(Q=I)}}return Q}B=B||0;for(var e=deferred.length;e>0&&deferred[e-1][2]>B;e--)deferred[e]=deferred[e-1];deferred[e]=[U,F,B]},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),(()=>{var Q={577:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,s,[n,g,I]=F,e=0;if(n.some((U=>0!==Q[U]))){for(B in g)__webpack_require__.o(g,B)&&(__webpack_require__.m[B]=g[B]);if(I)var L=I(__webpack_require__)}for(U&&U(F);e<n.length;e++)s=n[e],__webpack_require__.o(Q,s)&&Q[s]&&Q[s][0](),Q[s]=0;return __webpack_require__.O(L)},F=self.webpackChunk_masatomakino_threejs_city_map_util=self.webpackChunk_masatomakino_threejs_city_map_util||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(485)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();